[{"name":"app.R","content":"library(\"shiny\")\nlibrary(\"ggplot2\")\nlibrary(\"tidyr\")\nlibrary(\"dplyr\")\nlibrary(\"shinythemes\")\nlibrary(\"patchwork\")\n\n# shinylive::export(\"app\", \"docs\")\n\n# Define UI for application that draws a histogram\nui <- fluidPage(theme = shinytheme(\"spacelab\"),\n  \n  # Application title\n  titlePanel(\"CLT\", windowTitle = \"CLT\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(width = 3, \n       numericInput(\"n_of_dist\", \n                    \"Number of rolls:\", \n                    value = 10000, \n                    min = 1, \n                    max = 10000),\n       sliderInput(\"n_samples\", \n                   \"Number of distribution samples\", \n                   min = 2, \n                   max = 1000, \n                   value = 1000), \n       sliderInput(\"sample_size\", \n                   \"Size of sample draws\", \n                   min = 2, \n                   max = 50, \n                   value = 2), \n       sliderInput(\"plot_bw\", \n                   \"Binwidth\", \n                   min = 0, \n                   max = 1, \n                   value = 0.5, \n                   step = 0.05),\n       br(),\n       p(strong(\"Created by:\"), \n         tags$a(\"Joseph V. Casillas\", href=\"http://www.jvcasillas.com\"),\n       br(), \n         strong(\"Source code:\"), \n         tags$a(\"Github\", href=\"https://github.com/jvcasill/shiny_clt/\"))),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n       plotOutput(\"clt_plots\")\n    )\n  )\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  output$clt_plots <- renderPlot({\n    \n    # Generate distribution\n    my_distribution <- sample(1:6, size = input$n_of_dist, replace = TRUE)\n    \n    # Descriptives of the distribution\n    dist_mean <- mean(my_distribution)\n    dist_sd   <- sd(my_distribution)\n    dist_se   <- dist_sd / sqrt(input$n_of_dist)\n    \n    # Generate vector to store samples\n    my_samples <- vector(mode = \"numeric\", length = input$n_samples)\n    \n    # Get samples\n    for (i in 1:input$n_samples) {\n      my_samples[i] <- mean(sample(my_distribution, \n                                   size = input$sample_size, \n                                   replace = FALSE))\n    }\n    \n    # Descriptives of sample\n    sample_mean <- mean(my_samples)\n    sample_sd   <- sd(my_samples)\n    sample_se   <- sample_sd / sqrt(length(my_samples))\n    \n    my_theme <- function(...) {\n      list(\n        theme_minimal(base_family = 'Palatino', base_size = 20), \n        theme(panel.grid.major = element_blank(), \n              panel.grid.minor = element_blank())\n      )\n    }\n    \n    # Plot results\n    p5 <- tibble(my_distribution) |>\n      mutate(fac = \"fac\") |>\n      ggplot() + \n      aes(x = my_distribution, fill = fac) + \n      geom_histogram(binwidth = 1, color = \"grey20\")\n    \n    p5_ymax <- ggplot_build(p5)$data[[1]] |> \n      summarize(ymax = max(y) + max(y) * 0.15) |> \n      pull()\n    \n    p5 <- p5 + geom_vline(xintercept = dist_mean, lty = 3, \n                          color = \"white\", linewidth = 1) + \n      geom_vline(xintercept = dist_mean - dist_sd, lty = 3, \n                 color = \"white\", linewidth = 1) + \n      geom_vline(xintercept = dist_mean + dist_sd, lty = 3, \n                 color = \"white\", linewidth = 1) + \n      scale_fill_viridis_d(name = NULL, begin = 0.3, guide = \"none\") + \n      scale_x_continuous(limits = c(-2, 9), labels = 1:6, breaks = 1:6) + \n      coord_cartesian(ylim = c(0, p5_ymax * 1.05)) + \n      annotate(\"text\", x = dist_mean, y = p5_ymax, parse = T, \n               size = 7, label = paste0(\"mu == \", round(dist_mean, 3))) + \n      annotate(\"text\", x = dist_mean, y = p5_ymax * .93, parse = T, size = 7, \n               label = paste0(\"sigma == \", round(dist_sd, 3))) + \n      labs(x = paste0(input$n_of_dist, \" rolls\"), y = NULL) +\n      my_theme()\n    \n    p6 <- tibble(my_samples) |>\n      mutate(fac = \"fac\") |>\n      ggplot() + \n      aes(x = my_samples, fill = fac) + \n      geom_histogram(\n        aes(y = after_stat(density)), \n        binwidth = input$plot_bw, color = \"grey20\"\n      )\n    \n    p6_x_ymax <- ggplot_build(p6)$data[[1]] |> \n      summarize(\n        xmin = min(my_samples) - sd(my_samples) * 2, \n        xmax = max(my_samples) + sd(my_samples) * 2, \n        ymax = max(ymax) + max(ymax) * .15\n      ) |> \n      pivot_longer(\n        cols = everything(), \n        names_to = \"my_axis\", \n        values_to = \"val\"\n      ) |> \n      as.data.frame()\n    \n    p6 <- p6 + stat_function(fun = dnorm, \n                             args = list(mean = mean(my_samples), \n                                         sd = sd(my_samples))) + \n      geom_vline(xintercept = sample_mean, lty = 3, color = \"white\", linewidth = 1) + \n      geom_vline(xintercept = sample_mean - sample_sd, lty = 3, \n                 color = \"white\", linewidth = 1) + \n      geom_vline(xintercept = sample_mean + sample_sd, lty = 3, \n                 color = \"white\", linewidth = 1) + \n      scale_fill_viridis_d(name = NULL, begin = 0.8, guide = \"none\") + \n      scale_x_continuous(limits = c(-2, 9), labels = 1:6, breaks = 1:6) + \n      scale_y_continuous(position = \"right\") + \n      annotate(\"text\", x = sample_mean, y = p6_x_ymax[3, \"val\"], \n               parse = T, size = 7,\n               label = paste0(\"bar(x)  == \", round(sample_mean, 3))) + \n      annotate(\"text\", x = sample_mean, y = p6_x_ymax[3, \"val\"] * .93, \n               parse = T, size = 7,\n               label = paste0(\"sd == \", round(sample_sd, 3))) + \n      labs(\n        x = paste0(input$n_samples, \" samples (n = \", input$sample_size, \")\"), \n        y = NULL\n      ) +\n      my_theme()\n    \n    \n    p5 + p6\n    \n  })\n  \n}\n\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n","type":"text"}]
